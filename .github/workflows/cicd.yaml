name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Load environment variables and process variables
        run: |
          while IFS= read -r line || [[ -n "$line" ]]; do
            # Skip comments and empty lines
            [[ "$line" =~ ^#.*$ || -z "$line" ]] && continue
          
            # Extract variable name and value
            varname=$(echo "$line" | cut -d '=' -f1)
            varvalue=$(echo "$line" | cut -d '=' -f2-)
          
            # Store in GitHub environment
            echo "$varname=$varvalue" >> $GITHUB_ENV
          done < deployment/deploy_env_vars
          
          # Process namespace separately to resolve ${TEAMID}
          if grep -q "namespace=" deployment/deploy_env_vars; then
            namespace_line=$(grep "namespace=" deployment/deploy_env_vars)
            namespace_value=$(echo "$namespace_line" | cut -d '=' -f2-)
          
            # Replace ${TEAMID} with actual teamid value if it exists
            if [[ "$namespace_value" == *'${TEAMID}'* ]] && [[ -n "$teamid" ]]; then
              processed_namespace=${namespace_value/\${TEAMID}/$teamid}
              echo "namespace=$processed_namespace" >> $GITHUB_ENV
              echo "Processed namespace: $processed_namespace"
            fi
          fi

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Run tests and generate test reports
        run: |
          ./gradlew test jacocoTestReport

      - name: SonarQube Analysis for Member Service
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew :member:sonar \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.token=${SONAR_TOKEN} \
            -Dsonar.projectKey=lifesub-member-${teamid} \
            -Dsonar.projectName=lifesub-member-${teamid} \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**

      - name: SonarQube Analysis for MySub Service
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew :mysub-infra:sonar \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.token=${SONAR_TOKEN} \
            -Dsonar.projectKey=lifesub-mysub-${teamid} \
            -Dsonar.projectName=lifesub-mysub-${teamid} \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**

      - name: SonarQube Analysis for Recommend Service
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew :recommend:sonar \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.token=${SONAR_TOKEN} \
            -Dsonar.projectKey=lifesub-recommend-${teamid} \
            -Dsonar.projectName=lifesub-recommend-${teamid} \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: |
            member/build/libs/
            mysub-infra/build/libs/
            recommend/build/libs/
            deployment/
          retention-days: 1

  release:
    name: Build and Push Docker Images
    needs: build
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-image-tag.outputs.image_tag }}

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-build

      - name: Load environment variables and process variables
        id: load-env
        run: |
          while IFS= read -r line || [[ -n "$line" ]]; do
            # Skip comments and empty lines
            [[ "$line" =~ ^#.*$ || -z "$line" ]] && continue
          
            # Extract variable name and value
            varname=$(echo "$line" | cut -d '=' -f1)
            varvalue=$(echo "$line" | cut -d '=' -f2-)
          
            # Store in GitHub environment
            echo "$varname=$varvalue" >> $GITHUB_ENV
          done < deployment/deploy_env_vars
          
          # Process namespace separately to resolve ${TEAMID}
          if grep -q "namespace=" deployment/deploy_env_vars; then
            namespace_line=$(grep "namespace=" deployment/deploy_env_vars)
            namespace_value=$(echo "$namespace_line" | cut -d '=' -f2-)
          
            # Replace ${TEAMID} with actual teamid value if it exists
            if [[ "$namespace_value" == *'${TEAMID}'* ]] && [[ -n "$teamid" ]]; then
              processed_namespace=${namespace_value/\${TEAMID}/$teamid}
              echo "namespace=$processed_namespace" >> $GITHUB_ENV
              echo "Processed namespace: $processed_namespace"
            fi
          fi

      - name: Set image tag
        id: set-image-tag
        run: |
          IMAGE_TAG=$(date +'%Y%m%d%H%M%S')
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Timestamp-based image tag: ${IMAGE_TAG}"

      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.registry }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push Member image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/container/Dockerfile
          build-args: |
            BUILD_LIB_DIR=member/build/libs
            ARTIFACTORY_FILE=member.jar
          push: true
          tags: ${{ env.registry }}/${{ env.image_org }}/member:${{ steps.set-image-tag.outputs.image_tag }}

      - name: Build and push MySub image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/container/Dockerfile
          build-args: |
            BUILD_LIB_DIR=mysub-infra/build/libs
            ARTIFACTORY_FILE=mysub.jar
          push: true
          tags: ${{ env.registry }}/${{ env.image_org }}/mysub:${{ steps.set-image-tag.outputs.image_tag }}

      - name: Build and push Recommend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/container/Dockerfile
          build-args: |
            BUILD_LIB_DIR=recommend/build/libs
            ARTIFACTORY_FILE=recommend.jar
          push: true
          tags: ${{ env.registry }}/${{ env.image_org }}/recommend:${{ steps.set-image-tag.outputs.image_tag }}

  deploy:
    name: Deploy to Kubernetes
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-build

      - name: Load environment variables and process variables
        run: |
          while IFS= read -r line || [[ -n "$line" ]]; do
            # Skip comments and empty lines
            [[ "$line" =~ ^#.*$ || -z "$line" ]] && continue
          
            # Extract variable name and value
            varname=$(echo "$line" | cut -d '=' -f1)
            varvalue=$(echo "$line" | cut -d '=' -f2-)
          
            # Store in GitHub environment
            echo "$varname=$varvalue" >> $GITHUB_ENV
          done < deployment/deploy_env_vars
          
          # Process namespace separately to resolve ${TEAMID}
          if grep -q "namespace=" deployment/deploy_env_vars; then
            namespace_line=$(grep "namespace=" deployment/deploy_env_vars)
            namespace_value=$(echo "$namespace_line" | cut -d '=' -f2-)
          
            # Replace ${TEAMID} with actual teamid value if it exists
            if [[ "$namespace_value" == *'${TEAMID}'* ]] && [[ -n "$teamid" ]]; then
              processed_namespace=${namespace_value/\${TEAMID}/$teamid}
              echo "namespace=$processed_namespace" >> $GITHUB_ENV
              echo "Processed namespace: $processed_namespace"
            fi
          fi

      - name: Debug environment variables
        run: |
          echo "teamid: ${{ env.teamid }}"
          echo "namespace: ${{ env.namespace }}"
          echo "registry: ${{ env.registry }}"
          echo "image_org: ${{ env.image_org }}"

      - name: Set up Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up AKS and create namespace
        run: |
          az aks get-credentials --resource-group rg-digitalgarage-01 --name aks-digitalgarage-01 --overwrite-existing
          
          # Ensure namespace is correctly formatted with no unresolved variables
          NAMESPACE="${{ env.namespace }}"
          if [[ "$NAMESPACE" == *'${'* ]]; then
            NAMESPACE="${{ env.teamid }}-lifesub-ns"
            echo "Fixing namespace to: $NAMESPACE"
            echo "namespace=$NAMESPACE" >> $GITHUB_ENV
          fi
          
          echo "Creating namespace: $NAMESPACE"
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Image Pull Secret
        run: |
          kubectl create secret docker-registry acr-secret \
            --docker-server=${{ env.registry }} \
            --docker-username=${{ secrets.ACR_USERNAME }} \
            --docker-password=${{ secrets.ACR_PASSWORD }} \
            --namespace=${{ env.namespace }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Generate Deployment Manifest
        run: |
          export namespace=${{ env.namespace }}
          export allowed_origins=${{ env.allowed_origins }}
          export jwt_secret_key=${{ env.jwt_secret_key }}
          export postgres_user=${{ env.postgres_user }}
          export postgres_password=${{ env.postgres_password }}
          export replicas=${{ env.replicas }}
          export resources_requests_cpu=${{ env.resources_requests_cpu }}
          export resources_requests_memory=${{ env.resources_requests_memory }}
          export resources_limits_cpu=${{ env.resources_limits_cpu }}
          export resources_limits_memory=${{ env.resources_limits_memory }}
          export ingress_host=${{ env.ingress_host }}
          
          # Set image paths with the image tag from release job
          export member_image_path="${{ env.registry }}/${{ env.image_org }}/member:${{ needs.release.outputs.image_tag }}"
          export mysub_image_path="${{ env.registry }}/${{ env.image_org }}/mysub:${{ needs.release.outputs.image_tag }}"
          export recommend_image_path="${{ env.registry }}/${{ env.image_org }}/recommend:${{ needs.release.outputs.image_tag }}"
          
          # Generate manifest from template
          envsubst < deployment/deploy.yaml.template > deployment/deploy.yaml
          
          # For debugging: Output the generated manifest
          echo "Generated manifest file:"
          cat deployment/deploy.yaml

      - name: Apply Deployment Manifest
        run: |
          kubectl apply -f deployment/deploy.yaml
          
          echo "Waiting for deployments to be ready..."
          kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/member --timeout=300s
          kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/mysub --timeout=300s
          kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/recommend --timeout=300s
          
          echo "All backend services successfully deployed"
          kubectl -n ${{ env.namespace }} get pods