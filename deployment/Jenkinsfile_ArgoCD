def PIPELINE_ID = "${env.BUILD_NUMBER}"

def getImageTag() {
    def dateFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
    def currentDate = new Date()
    return dateFormat.format(currentDate)
}

podTemplate(
    label: "${PIPELINE_ID}",
    serviceAccount: 'jenkins',
    containers: [
        containerTemplate(name: 'podman', image: "mgoltzsche/podman", ttyEnabled: true, command: 'cat', privileged: true),
        containerTemplate(name: 'gradle',
                        image: 'gradle:jdk17',
                        ttyEnabled: true,
                        command: 'cat',
                        envVars: [
                            envVar(key: 'DOCKER_HOST', value: 'unix:///run/podman/podman.sock'),
                            envVar(key: 'TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE', value: '/run/podman/podman.sock'),
                            envVar(key: 'TESTCONTAINERS_RYUK_DISABLED', value: 'true')
                        ]),
        containerTemplate(name: 'azure-cli', image: 'hiondal/azure-kubectl:latest', command: 'cat', ttyEnabled: true),
        containerTemplate(name: 'envsubst', image: "hiondal/envsubst", command: 'sleep', args: '1h'),
        containerTemplate(name: 'git', image: 'alpine/git:latest', command: 'cat', ttyEnabled: true)
    ],
    volumes: [
        emptyDirVolume(mountPath: '/home/gradle/.gradle', memory: false),
        emptyDirVolume(mountPath: '/root/.azure', memory: false),
        emptyDirVolume(mountPath: '/run/podman', memory: false)
    ]
) {
    node(PIPELINE_ID) {
        def props
        def imageTag = getImageTag()
        def manifest = "deploy.yaml"
        def namespace
        def services = ['member', 'mysub', 'recommend']
        def manifestRepo = "https://github.com/handson-dg0305/lifesub-manifest.git"
        def manifestDir = "lifesub-manifest"

        stage("Get Source") {
            checkout scm
            props = readProperties file: "deployment/deploy_env_vars"
            namespace = "${props.namespace}"
        }

        stage("Setup AKS") {
            container('azure-cli') {
                withCredentials([azureServicePrincipal('azure-credentials')]) {
                    sh """
                        az login --service-principal -u \$AZURE_CLIENT_ID -p \$AZURE_CLIENT_SECRET -t \$AZURE_TENANT_ID
                        az aks get-credentials --resource-group rg-digitalgarage-01 --name aks-digitalgarage-01 --overwrite-existing
                        kubectl create namespace ${namespace} --dry-run=client -o yaml | kubectl apply -f -
                    """
                }
            }
        }

        stage('Build Applications & SonarQube Analysis') {
            container('podman') {
                sh 'podman system service -t 0 unix:///run/podman/podman.sock & sleep 2'
            }

            container('gradle') {
                def testContainersConfig = '''docker.client.strategy=org.testcontainers.dockerclient.UnixSocketClientProviderStrategy
docker.host=unix:///run/podman/podman.sock
ryuk.container.privileged=true
testcontainers.reuse.enable=true'''

                sh """
                    # TestContainers 설정
                    mkdir -p member/src/test/resources mysub-infra/src/test/resources recommend/src/test/resources
                    echo '${testContainersConfig}' > member/src/test/resources/testcontainers.properties
                    echo '${testContainersConfig}' > mysub-infra/src/test/resources/testcontainers.properties
                    echo '${testContainersConfig}' > recommend/src/test/resources/testcontainers.properties
                """

                // 빌드 및 SonarQube 분석
                withSonarQubeEnv('SonarQube') {
                    sh """
                        chmod +x gradlew

                        # 빌드 실행
                        ./gradlew :member:build :mysub-infra:build :recommend:build -x test

                        # Member 서비스
                        ./gradlew :member:test :member:jacocoTestReport :member:sonar \\
                            -Dsonar.projectKey=lifesub-member-dg0305 \\
                            -Dsonar.projectName=lifesub-member-dg0305 \\
                            -Dsonar.java.binaries=build/classes/java/main \\
                            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \\
                            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**

                        # Mysub 서비스
                        ./gradlew :mysub-infra:test :mysub-infra:jacocoTestReport :mysub-infra:sonar \\
                            -Dsonar.projectKey=lifesub-mysub-dg0305 \\
                            -Dsonar.projectName=lifesub-mysub-dg0305 \\
                            -Dsonar.java.binaries=build/classes/java/main \\
                            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \\
                            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**

                        # Recommend 서비스
                        ./gradlew :recommend:test :recommend:jacocoTestReport :recommend:sonar \\
                            -Dsonar.projectKey=lifesub-recommend-dg0305 \\
                            -Dsonar.projectName=lifesub-recommend-dg0305 \\
                            -Dsonar.java.binaries=build/classes/java/main \\
                            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \\
                            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**
                    """
                }
            }
        }

        stage('Quality Gate') {
            timeout(time: 10, unit: 'MINUTES') {
                def qg = waitForQualityGate()
                if (qg.status != 'OK') {
                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }
            }
        }

        stage('Build & Push Images') {
            container('podman') {
                withCredentials([usernamePassword(
                    credentialsId: 'acr-credentials',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD'
                )]) {
                    sh "podman login ${props.registry} --username \$USERNAME --password \$PASSWORD"

                    services.each { service ->
                        def buildDir = service == 'mysub' ? 'mysub-infra' : service
                        def jarFile = service == 'mysub' ? 'mysub.jar' : "${service}.jar"

                        sh """
                            podman build \\
                                --build-arg BUILD_LIB_DIR="${buildDir}/build/libs" \\
                                --build-arg ARTIFACTORY_FILE="${jarFile}" \\
                                -f deployment/container/Dockerfile \\
                                -t ${props.registry}/${props.image_org}/${service}:${imageTag} .

                            podman push ${props.registry}/${props.image_org}/${service}:${imageTag}
                        """
                    }
                }
            }
        }

        stage('Generate Manifest') {
            container('envsubst') {
                sh """
                    export namespace=${namespace}
                    export allowed_origins=${props.allowed_origins}
                    export jwt_secret_key=${props.jwt_secret_key}
                    export postgres_user=${props.postgres_user}
                    export postgres_password=${props.postgres_password}
                    export replicas=${props.replicas}
                    export resources_requests_cpu=${props.resources_requests_cpu}
                    export resources_requests_memory=${props.resources_requests_memory}
                    export resources_limits_cpu=${props.resources_limits_cpu}
                    export resources_limits_memory=${props.resources_limits_memory}
                    export ingress_host=${props.ingress_host}

                    # 이미지 경로 환경변수 설정
                    export member_image_path=${props.registry}/${props.image_org}/member:${imageTag}
                    export mysub_image_path=${props.registry}/${props.image_org}/mysub:${imageTag}
                    export recommend_image_path=${props.registry}/${props.image_org}/recommend:${imageTag}

                    # manifest 생성
                    envsubst < deployment/${manifest}.template > deployment/${manifest}

                    # 디버깅을 위해 생성된 manifest 출력
                    echo "생성된 매니페스트 파일 내용:"
                    cat deployment/${manifest}
                """
            }
        }

        stage('Update Manifest Repository') {
            container('git') {
                withCredentials([usernamePassword(credentialsId: 'github-credentials-dg0305', 
                                                 usernameVariable: 'GIT_USERNAME',
                                                 passwordVariable: 'GIT_PASSWORD')]) {
                    // 매니페스트 저장소 클론
                    sh """
                        git config --global user.email "jenkins@example.com"
                        git config --global user.name "Jenkins CI"
                        
                        git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/handson-dg0305/lifesub-manifest.git ${manifestDir}
                    """
                    
                    // 서비스별로 이미지 태그 업데이트
                    services.each { service ->
                        def deploymentFile = "${manifestDir}/lifesub/deployments/${service}-deployment.yaml"
                        def imagePath = "${props.registry}/${props.image_org}/${service}:${imageTag}"
                        
                        sh """
                            # 이미지 업데이트하기
                            sed -i 's|image: ${props.registry}/${props.image_org}/${service}:.*|image: ${imagePath}|g' ${deploymentFile}
                            
                            # 변경 내용 확인
                            echo "Updated ${service} deployment manifest:"
                            cat ${deploymentFile}
                        """
                    }
                    
                    // 변경사항 커밋 및 푸시
                    sh """
                        cd ${manifestDir}
                        git add lifesub/deployments/*.yaml
                        git commit -m "Update image tags to ${imageTag} [ci skip]"
                        git push origin HEAD:master
                    """
                }
            }
        }
        
        stage('Verify ArgoCD Sync') {
            container('azure-cli') {
                // ArgoCD 상태 확인 (선택 사항)
                echo "Image tags updated to ${imageTag}. ArgoCD will automatically sync the changes."
                
                // ArgoCD CLI를 사용하여 상태를 확인하는 코드를 추가할 수도 있습니다.
                // 예: argocd app sync lifesub
            }
        }
    }
}